#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""

Plots Fig. 1a

"""

import os
import sys
import numpy as np
import seaborn as sns

import matplotlib.pylab as plt
plt.rcParams['svg.fonttype'] = 'none'

from alabeye.stats import cohen_d_ci


#%% Main directory for experiment data
root_dir = '/home/umit/Documents/Research_ET/AutismVids/avp_data'

# Load results generated by 05_gazetime_faceparts_postprocess.py
results_dir = os.path.join(root_dir,'Results_v1','Cohend_pool')


# check whether the subjects match across two episodes
asd_subjs_vid1 = np.load(os.path.join(results_dir,'FaceData_asd_subjs_Ep1.npy'))
asd_subjs_vid2 = np.load(os.path.join(results_dir,'FaceData_asd_subjs_Ep4_AQNR.npy'))

td_subjs_vid1 = np.load(os.path.join(results_dir,'FaceData_td_subjs_Ep1.npy'))
td_subjs_vid2 = np.load(os.path.join(results_dir,'FaceData_td_subjs_Ep4_AQNR.npy'))
assert all(asd_subjs_vid1 == asd_subjs_vid2) and all(td_subjs_vid1 == td_subjs_vid2)

# load data to plot
asd_vid1 = np.load(os.path.join(results_dir,'FaceData_asd_Ep1.npy'))
asd_vid2 = np.load(os.path.join(results_dir,'FaceData_asd_Ep4_AQNR.npy'))

td_vid1 = np.load(os.path.join(results_dir,'FaceData_td_Ep1.npy'))
td_vid2 = np.load(os.path.join(results_dir,'FaceData_td_Ep4_AQNR.npy'))


#%%
dval_vid1 = cohen_d_ci(td_vid1,asd_vid1,rm_extreme=False)
dval_vid2 = cohen_d_ci(td_vid2,asd_vid2,rm_extreme=False)


# Add p-vals
def label_diff_d(ax,i,j,x_vals,y_vals,pval,d_val,ci_val,yshift=0.0,h=0.01,text='*'):
    
    ci_val = np.sort(np.sign(d_val)*ci_val)
    
    dum_p = '' if pval<0.05 else ''
    text = r'%sd=%1.2f [%1.2f,%1.2f]'%(dum_p,abs(d_val),ci_val[0],ci_val[1])
    
    x1, x2 = x_vals[i], x_vals[j]
    y = max(y_vals[i], y_vals[j]) + yshift
    ax.plot([x1, x1, x2, x2], [y, y+h, y+h, y], lw=1,color='k')

    if len(text)> 4:
        ax.text((x1+x2)*.5+0.05, y+h+0.02, text, ha='center', va='bottom',color='k',fontsize=7, fontweight='normal',rotation=0)
    else:
        ax.text((x1+x2)*.5, y+h-0.025, text, ha='center', va='bottom',color='k',fontweight='normal')    


# ------------- get colors for subjects -------------
from matplotlib import colors
from scipy.stats import rankdata

cmap_asd = colors.LinearSegmentedColormap.from_list("", ['DarkRed', '#db3926', 'SandyBrown', 'Gold',  'DarkOrange'])

cmap_nt = colors.LinearSegmentedColormap.from_list("", ['MidnightBlue',"C0",'DeepSkyBlue','teal','Turquoise','cyan','C2'])

norm_asd = colors.Normalize(vmin=1, vmax=asd_vid1.size)
asd_vid1_rank = rankdata(asd_vid1)
asd_colors = [ cmap_asd(norm_asd(ii)) for ii in asd_vid1_rank ]

norm_nt = colors.Normalize(vmin=1, vmax=td_vid1.size)
td_vid1_rank = rankdata(td_vid1)
td_colors = [ cmap_nt(norm_nt(ii)) for ii in td_vid1_rank ]
colorp = [ asd_colors, td_colors ]

# ------------- get colors for subjects -------------
markerp_asd = [ 'v' if sii.startswith('RA') else 'o' for sii in asd_subjs_vid1 ]
markerp_nt = [ 'v' if sii.startswith('RA') else 'o' for sii in td_subjs_vid1 ]
markerp = [ markerp_asd, markerp_nt ]
# ---------------- o ----------------


signf_max = 89

fig, axes = plt.subplots(nrows=1, ncols=2, sharey=True, figsize=(3.6,2))

axes[0].set_title('Episode A',fontsize=7)
        
x_sns = ['ASD']*len(asd_vid1) + ['C']*len(td_vid1) 
y_sns = np.hstack((asd_vid1*100,td_vid1*100))

# we use a slightly altered version of sns.swarmplot() to plot scatter points in different colors and markers. 
# if this is not available, then use the default version in the seaborn library. 
try: 
    sns.swarmplot(x=x_sns,y=y_sns,ax=axes[0],size=3, palette= ['#db3926', '#1f78b4'], 
                  color_set=colorp, marker_set=markerp )
except AttributeError:
    sns.swarmplot(x=x_sns,y=y_sns,ax=axes[0],size=3, palette= ['#db3926', '#1f78b4'] )
    
sns.boxplot(x=x_sns,y=y_sns,ax=axes[0],showcaps=True,boxprops={'color':'k','facecolor':'None', "zorder":10},
         showfliers=False,whiskerprops={'linewidth':1.3, "zorder":10},
         zorder=10,whis=[2.5,97.5], width=0.5)

label_diff_d(axes[0],0,1,[0,1],[signf_max,signf_max],dval_vid1[4],dval_vid1[1],\
             np.array([dval_vid1[2],dval_vid1[3]]),yshift=-0.008)

from matplotlib.lines import Line2D
legend_elements = [Line2D([0], [0], marker='v', color='w', label='Cal', markerfacecolor='none', markeredgecolor='k', markersize=3,markeredgewidth=0.85),
                   Line2D([0], [0], marker='o', color='w', label='IU', markerfacecolor='none', markeredgecolor='k', markersize=3,markeredgewidth=0.85),]
axes[0].legend(handles=legend_elements,ncol=2, loc="lower center", borderaxespad=0.5,handletextpad=0.6,labelspacing=0.15,handlelength=0,columnspacing=1.5,
          frameon=False,prop={'size': 7})

axes[0].set_xticks([0,1])
axes[0].set_xticklabels(['ASD\n(N=%d)'%asd_vid1.size,'TD\n(N=%d)'%td_vid1.size],fontsize=7,rotation=0)
axes[0].set_yticks([50,60,70,80,90])
axes[0].tick_params(axis='y', labelsize=7)

axes[0].spines['top'].set_visible(False)
axes[0].spines['right'].set_visible(False)
axes[0].get_xaxis().tick_bottom()
axes[0].get_yaxis().tick_left()
axes[0].set_ylabel('Gaze time to faces (%)',fontsize=7)   

#%%
axes[1].set_title('Episode B',fontsize=7)
        
x_sns = ['ASD']*len(asd_vid2) + ['C']*len(td_vid2) 
y_sns = np.hstack((asd_vid2*100,td_vid2*100))

try:
    sns_plot = sns.swarmplot(x=x_sns,y=y_sns,ax=axes[1],size=3, palette= ['#db3926', '#1f78b4'], 
                             color_set=colorp, marker_set=markerp) # swarmplot  stripplot
except AttributeError:
    sns_plot = sns.swarmplot(x=x_sns,y=y_sns,ax=axes[1],size=3, palette= ['#db3926', '#1f78b4'])
    
sns.boxplot(x=x_sns,y=y_sns,ax=axes[1],showcaps=True,boxprops={'color':'k','facecolor':'None', "zorder":10},
         showfliers=False,whiskerprops={'linewidth':1.3, "zorder":10},
         zorder=10,whis=[2.5,97.5], width=0.5)


axes[1].set_xticks([0,1])
axes[1].set_xticklabels(['ASD\n(N=%d)'%asd_vid2.size,'TD\n(N=%d)'%td_vid2.size],fontsize=7,rotation=0)

axes[0].set_ylim([50,np.ceil(sns_plot.get_ylim()[1])])
axes[1].set_yticks([50,60,70,80,90])

label_diff_d(axes[1],0,1,[0,1],[signf_max,signf_max],dval_vid2[4],dval_vid2[1],\
             np.array([dval_vid2[2],dval_vid2[3]]),yshift=-0.008)

axes[1].spines['top'].set_visible(False)
axes[1].spines['right'].set_visible(False)
axes[1].get_xaxis().tick_bottom()
axes[1].get_yaxis().tick_left()

plt.tight_layout()

plt.savefig('Fig_Cohend_datapoints.png',dpi=600)
plt.savefig('Fig_Cohend_datapoints.svg',format='svg')
